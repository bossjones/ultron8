---
# sudo ansible-playbook -i inventory.ini -c local vagrant_playbook.yml
##############################################################################
# SERVERS: Install and configure rsyslogd
##############################################################################
- hosts: localhost
  name: bootstrap servers before running rsyslogd
  gather_facts: True
  become: yes
  become_method: sudo
  vars:
    bossjones__user: vagrant
    bossjones__group: vagrant
    timezone: 'UTC'
  environment:
    DEBIAN_FRONTEND: noninteractive
  roles:
     - role: boss-ansible-role-core
       tags:
         - boss-ansible-role-core

     - role: boss-ansible-role-update-hosts
       boss__update__hosts__hosts_file: /etc/hosts
       # ansible group to use when finding ip addresses
       boss__update__hosts__ansible_group: "ultron8"

       boss__update__hosts__networking_interface: "enp0s8" # enp0s8 (if vagrant)

       ### NEW vars
       # SOURCE: https://github.com/bertvv/ansible-role-hosts/blob/master/defaults/main.yml

       boss__update__hosts__hosts_playbook_version: "1.0.1"

       # If set to true, an entry for `ansible_hostname`, bound to the host's default IPv4 address is added added.
       boss__update__hosts__hosts_add_default_ipv4: true

       # If set to true, basic IPv6 entries (localhost6, ip6-localnet, etc) are added.
       boss__update__hosts__hosts_add_basic_ipv6: true

       # If set to true, an entry for every host managed by Ansible is added. Remark that this makes `boss__update__hosts__hosts_add_default_ipv4` unnecessary, as it will be added as wel by this setting.
       boss__update__hosts__hosts_add_ansible_managed_hosts: true

       # Select specific groups of Ansible managed hosts to be added in the hosts file.
       boss__update__hosts__hosts_add_ansible_managed_hosts_groups: ['ultron8']

       # Custom hosts entries to be added
       boss__update__hosts__hosts_entries: []

       # Custom host file snippets to be added
       boss__update__hosts__hosts_file_snippets: []

       # IP protocol to use
       boss__update__hosts__hosts_ip_protocol: 'ipv4'

       # Network interface to use
       boss__update__hosts__hosts_network_interface: "{{ boss__update__hosts__networking_interface }}"

       # convenience variable that has ansible_ as part of name for dynamic loading
       boss__update__hosts__hosts_ansible_network_interface: "ansible_{{ boss__update__hosts__networking_interface }}"

       # Backup of previous host
       boss__update__hosts__host_file_backup: yes

       # Use old 'override' style or new 'smart' style
       boss__update__hosts__default_task: "smart"
       tags:
         - boss-ansible-role-update-hosts

     - role: boss-ansible-role-bootstrap
       # Disable raw commands to avoid sudo issues.
       boss__bootstrap_raw: False
       # Don't set domain on Travis.
       boss__bootstrap_domain: ''
       # Try bootstrapping a different IP address to avoid idempotency loop.
       # boss__bootstrap_ipv4: '127.0.1.2'
       # boss__hosts_file: /etc/hosts.molecule
       boss__bootstrap_admin_default_users:
         - name: bossjones
       boss__bootstrap_admin_groups: [ 'admins', 'staff', 'adm', 'sudo', 'bossjones' ]
       boss__bootstrap_admin_system: False
       tags:
         - boss-ansible-role-bootstrap

     - role: boss-ansible-role-fact
       tags:
         - boss-ansible-role-fact

     - role: boss-ansible-role-environment
       tags:
         - boss-ansible-role-environment

     - role: boss-ansible-role-etckeeper
       tags:
         - boss-ansible-role-etckeeper

     # # - role: geerlingguy.pip

     - role: boss-ansible-role-timezone
       timezone: 'UTC'
       timezone_update_hardware_clock: False
       tags:
         - boss-ansible-role-timezone

     - role: boss-ansible-role-ntp
       task: install
       bossjones__user: vagrant
       bossjones__group: vagrant
       timezone: 'UTC'
       timezone_update_hardware_clock: False
       # defaults file for ansible-ntp
       # Defines if host is ntp_master
       # set ntp_master to true on specific group_vars/group
       ntp_master: False

       # Define your ntp_master_servers
       ntp_master_servers:
         - 0.ubuntu.pool.ntp.org
         - 1.ubuntu.pool.ntp.org
         - 2.ubuntu.pool.ntp.org
         - 3.ubuntu.pool.ntp.org
       tags:
         - boss-ansible-role-ntp

     - role: boss-ansible-role-debug
       boss__debug__debug_variables_file: '/tmp/ansible_variables'
       boss__debug__dump_dir: '/etc/ansible_dumps'
       boss__debug__dump_type: 'seperate' # seperate
       tags:
         - boss-ansible-role-debug

    #  - role: boss-ansible-role-tools
    #    task: tools
    #    bossjones__user: vagrant
    #    bossjones__group: vagrant
    #    boss__tools__install_docker_tools: True
    #    boss__tools__install_kube_tools: False
    #    boss__tools__install_rust_tools: True
    #    tags:
    #      - boss-ansible-role-tools

     - role: boss-ansible-role-journald
       bossjones__user: vagrant
       bossjones__group: vagrant
       tags:
         - boss-ansible-role-journald

- hosts: localhost
  tags:
    - pyenv
  vars:
    bossjones__user: vagrant
    bossjones__group: vagrant
  become: yes
  become_method: sudo
  environment:
    SHELL: /bin/bash
    PYTHON_CONFIGURE_OPTS: "--enable-shared"
  roles:
    - role: avanov.pyenv
      pyenv_path: "/home/{{ bossjones__user }}/.pyenv"
      pyenv_owner: "{{ bossjones__user }}"
      pyenv_group: "{{ bossjones__user }}"
      pyenv_update_git_install: no
      pyenv_enable_autocompletion: yes
      pyenv_python_versions:
        - "3.6.8"
        - "3.7.3"
      pyenv_virtualenvs:
        - venv_name: "env368"
          py_version: "3.6.8"

        - venv_name: "env373"
          py_version: "3.7.3"
  post_tasks:

    # Install plugins for pyenv
    - name: Clone pyenv-virtualenvwrapper
      git:
        repo: https://github.com/pyenv/pyenv-virtualenvwrapper
        dest: "/home/{{ bossjones__user }}/.pyenv/plugins/pyenv-virtualenvwrapper"
        version: "master"
        update: "{{ pyenv_update_git_install }}"

    - name: Clone pyenv-pip-rehash
      git:
        repo: https://github.com/pyenv/pyenv-pip-rehash
        dest: "/home/{{ bossjones__user }}/.pyenv/plugins/pyenv-pip-rehash"
        version: "master"
        update: "{{ pyenv_update_git_install }}"

    - name: Clone pyenv-pip-migrate
      git:
        repo: https://github.com/pyenv/pyenv-pip-migrate
        dest: "/home/{{ bossjones__user }}/.pyenv/plugins/pyenv-pip-migrate"
        version: "master"
        update: "{{ pyenv_update_git_install }}"

    - name: Clone pyenv-update
      git:
        repo: https://github.com/pyenv/pyenv-update
        dest: "/home/{{ bossjones__user }}/.pyenv/plugins/pyenv-update"
        version: "master"
        update: "{{ pyenv_update_git_install }}"

    - name: Clone pyenv-doctor
      git:
        repo: https://github.com/pyenv/pyenv-doctor
        dest: "/home/{{ bossjones__user }}/.pyenv/plugins/pyenv-doctor"
        version: "master"
        update: "{{ pyenv_update_git_install }}"

    - name: Clone pyenv-default-packages
      git:
        repo: https://github.com/jawshooah/pyenv-default-packages
        dest: "/home/{{ bossjones__user }}/.pyenv/plugins/pyenv-default-packages"
        version: "master"
        update: "{{ pyenv_update_git_install }}"

    # SOURCE: https://superuser.com/questions/1024677/ansible-how-to-recursively-set-directory-and-file-permissions
    - name: chown pyenv dir
      file: dest=/home/{{ bossjones__user }}/.pyenv owner="{{ bossjones__user }}" group="{{ bossjones__user }}" recurse=yes

# Install pyenv module so we can use it
- hosts: localhost
  tags:
    - pyenv_module
  vars:
    bossjones__user: vagrant
    bossjones__group: vagrant
    pyenv_root: "/home/{{ bossjones__user }}/.pyenv"
  become: yes
  become_user: vagrant
  environment:
    SHELL: /bin/bash
  roles:
    - role: suzuki-shunsuke.pyenv-module

  post_tasks:
    # use pip module with executable option
    - name: install tox
      pip:
        name: "{{item}}"
        executable: "{{pyenv_root}}/versions/3.7.3/bin/pip"
      with_items:
        - tox
        - docker-compose

    # use pip module with executable option
    - name: install tox
      pip:
        name: "{{item}}"
        executable: "{{pyenv_root}}/versions/3.6.8/bin/pip"
      with_items:
        - tox
        - docker-compose


# sudo apt-get install -y bmon ; \
# sudo apt-get install -y cmatrix ; \
# sudo apt-get install -y dnstop ; \
# sudo apt-get install -y ethstatus ; \
# sudo apt-get install -y glances ; \
# sudo apt-get install -y htop ; \
# sudo apt-get install -y ifstat ; \
# sudo apt-get install -y iotop ; \
# sudo apt-get install -y iptotal ; \
# sudo apt-get install -y iptraf-ng ; \
# sudo apt-get install -y itop ; \
# sudo apt-get install -y jnettop ; \
# sudo apt-get install -y kerneltop ; \
# sudo apt-get install -y latencytop ; \
# sudo apt-get install -y logtop ; \
# sudo apt-get install -y netmrg ; \
# sudo apt-get install -y nload ; \
# sudo apt-get install -y nmon ; \
# sudo apt-get install -y ntop ; \
# sudo apt-get install -y powertop ; \
# sudo apt-get install -y sagan ; \
# sudo apt-get install -y slurm ; \
# sudo apt-get install -y snetz ; \
# sudo apt-get install -y top ; \
# sudo apt-get install -y tiptop ; \
# sudo apt-get install -y vnstat
