# -*- coding: utf-8 -*-

version: ~> 1.0

language: python

dist: xenial

group: edge

env:
  global:
    - PYTHON="python3"
    - TOXENV=py37
    - PYTHON="python3"
    - DOCKER_COMPOSE_VERSION=1.24.0
    - DOCKER_VERSION=18.09
    - IS_CI_ENVIRONMENT="true"
    - CACHE_IMAGE=bossjones/ultron8-ci
    # INFO: https://pytest-cov.readthedocs.io/en/latest/plugins.html
    - COV_CORE_SOURCE=ultron8
    - COV_CORE_CONFIG=setup.cfg
    - COV_CORE_DATAFILE=.coverage
    # REGISTRY_USER
    - secure: l5zoavY8woQcKGa5UKwMeIHUbjFUxgBMG1UAfG683vTQv/19tIdqhpTwp20j5eLX4uOLGMLTHE6ldJhUP+qMZIn0OPepq0mSCJKEFvK48bpb7fdjlhpGxGwxKLi0X1xJNV8tblGoqQRMjKq/EMMreuBfAqIHbWe/a57+I5fvsgRAmNCD5AikBq7qbr+lZ6dDvPTSF/ssy46FSUTGzmnRwRUFHAmaKt5eHLpzRhpXAnZR74V0TfxABnu461mxvo8MFmLggRl/lNfQyoeKKDwmz8ls+ao+Q/Ljw2mLU2giCNiSattuPkGtAKU6IO7hyRtBzjP2Ufmeso2BrZoC4WpV5LdMMT4JioMktU7th39mzZ3YHDsu9kl9iU+eguNptilqzLTWrkUWSo3b3s/msNlX3l6nDBJ2EV1B328LrpMUdPBFfSxuVr2yjh3w0zQHYXqxsmSDaJBNwwsu6jas+lt6kggZ8o4pIjAwazBFJ0KeKjhQTi3k+kxaNIoAC6LV6G4A5lZuvsGs3Ru8wXFMyqqB73929iC8MxbVGdxAPxWBoWhMLifU6NRrjRi1zBVZjZHSdH2e10DCJ9HEZx3QwM0RfmRlGsdWYUHR+xgOW0/5ynBJbHmIzm9yxHPAm8KKa1WKdEOjLKvf4EgjKUpDxXXDhlg/T5+rZAQYV7YVrBS2AWM=
    # REGISTRY_PASS
    - secure: ePCBKvfKcZMhIXihNw0s3ZVpHoEId7Ig5uBtgQTNoJ7WqrtZY32Or52kNcJTSj0wQEwbXS+Miw5wGTqFPKxsmhMiPEE9IcTIh4expZ1oHjoh8ANHxZow2KfBj7bwjeNZkMUwGn/FcAZ/wDl4He7Xw/jtTI0k3N1f3l/dumIeCu49Ta7YUKDXnlfMVLvfovmXNlDlurYamHIeaxcaayUGSKB3mrPITEjib35m3I+mKw/DfXqt/jdWSuPGI6h2VmwYAjFWO0ZNri6zOt44IcUj3vJ+gaxTMAgmMii62NpXzSZpr8lAbBx4fSnZRisz1zIu3VuBLxw6cV+WN7cdwl42LGYkntZdmk1jRyGxEnint+yuU6kLKWKWwy1iW2ZXJBKXxP0ekhZ/KiTCw2qNxnv+86RjHhP905hw4kE6+iQdXCZrKl5frlH+4k1ngQF9UG+qFW94sAtI0WLaWf2PfhayKuwyvbc5m1fKlFFYZDHOZNM8S2gxsxUZo9DBiVowFzrKHullvpsbGJg9BXPtKAj5uj0qp4MoWI5uMqn4RxFL2sfNMSDEH7HEj7Lphqx1PEK5yzYRMgvKNswneGSKDT4TqtnYnYALi+g5Jly0pI4xd+VnJW5ds34smnas6pCYZH/fCAjf/Yjw8mlObEoFNGElzYWahgd6JINsjcrMuT5a3c8=

    # - TOXENV=py37
    # - PYTHON="python3"
    # - DOCKER_COMPOSE_VERSION=1.24.0
    # - DOCKER_VERSION=18.09
    # - IS_CI_ENVIRONMENT="true"

# matrix:
#   fast_finish: true
#   include:
#   - name: "Python 3.7 w/ Docker Compose 1.24.0 and Docker 18.09"
#     python: '3.7'
#     env:
#       # TOX_ENV: py37 # from airflowci
#       TOXENV: py37
#       PYTHON: "python3"
#       # DOCKER_COMPOSE_VERSION: 1.17.1
#       DOCKER_COMPOSE_VERSION: 1.24.0
#       # TEST_TARGET: default
#       # DOCKER_DATA: "$HOME/docker_data"
#       # DOCKER_VERSION: 18.09.1~3-0~ubuntu-xenial
#       DOCKER_VERSION: 18.09
#       IS_CI_ENVIRONMENT: "true"
#     sudo: required
#     dist: xenial
#     language: python
#     group: edge
#   allow_failures:
#   - python: '3.7'
#     env:
#       TOXENV: typing

services:
  - 'docker'

stages:
  - pre-test
  - test

# SOURCE: https://github.com/apache/airflow/blob/669b026c0bed36572ff0c5ab2eaf3f6d2c845577/.travis.yml
jobs:
  fast_finish: true
  include:
    # - name: Flake8
    #   python: '3.7'
    #   sudo: required
    #   dist: xenial
    #   language: python
    #   group: edge
    #   env:
    #     - PYTHON="python3"
    #   stage: pre-test
    #   install: pip install $(grep "^flake8==" requirements-test.txt | awk '{print $1}')
    #   script: flake8

    - name: mypy
      python: '3.7'
      # sudo: required
      dist: xenial
      language: python
      group: edge
      env:
        - PYTHON="python3"
      stage: pre-test
      install: pip install $(grep "^mypy==" requirements-test.txt | awk '{print $1}')
      script: mypy ultron8 tests

    # - name: Lint Dockerfile
    #   python: '3.7'
    #   sudo: required
    #   dist: xenial
    #   language: python
    #   group: edge
    #   env:
    #     - PYTHON="python3"
    #   stage: pre-test
    #   install: skip
    #   script: .ci/ci_lint_dockerfile.sh

    # - name: Check docs
    #   python: '3.7'
    #   sudo: required
    #   dist: xenial
    #   language: python
    #   group: edge
    #   env:
    #     - PYTHON="python3"
    #   stage: pre-test
    #   install: pip install -e .[docs]
    #   script: make build_doc

    - name: Pylint
      python: '3.7'
      # sudo: required
      dist: xenial
      language: python
      group: edge
      env:
        - PYTHON="python3"
      stage: pre-test
      install: pip install $(grep "^pylint==" requirements-dev.txt | awk '{print $1}')
      script: pylint --rcfile ./lint-configs-python/python/pylintrc ultron8/consts.py
      cache: false

    - name: Black
      python: '3.7'
      # sudo: required
      dist: xenial
      language: python
      group: edge
      env:
        - PYTHON="python3"
      stage: pre-test
      install: pip install $(grep "^black==" requirements-dev.txt | awk '{print $1}')
      script: black --check --exclude=ultron8_venv* --verbose ultron8
      cache: false

    - name: Pytest
      python: '3.7'
      # sudo: required
      dist: xenial
      language: python
      group: edge
      env:
        - PYTHON="python3"
      stage: test
      install:
        - pip install --upgrade pip
        - _COVERALLS_VERSION=$(grep -ir "coveralls==" requirements*.txt | awk -F= '{print $3}'| cut -d" " -f1)
        - _COVERAGE_VERSION=$(grep -ir "coverage==" requirements*.txt | awk -F= '{print $3}'| cut -d" " -f1)
        - 'travis_retry pip install coveralls==$_COVERALLS_VERSION'
        - 'travis_retry pip install coverage==$_COVERAGE_VERSION'
        - travis_retry docker-compose -f docker-compose.ci.yml pull || true
        - docker pull $CACHE_IMAGE:runtime-image || true
        # - travis_retry make dc-ci-build
        - travis_retry make ci-build | gnomon
      script:
        # - travis_retry make dc-ci-exec-test
        - travis_retry make ci-test
      # source: https://github.com/inspirehep/inspire-next/blob/9700274c36074a3e43168bf48b8ba3e3bfa7bcdf/.travis.yml
      after_script:
        # Killing via SIGTERM in order to trigger atexit and dump coverage information in WSGI
        - "docker-compose -f docker-compose.ci.yml kill -s SIGTERM"
        - "docker-compose -f docker-compose.ci.yml rm -f"
        # - docker kill ultron8_ci
      after_success:
      - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
      - docker push $CACHE_IMAGE:runtime-image | gnomon
      - _USER=$(ls -lta | awk '{print $3}')
      - _GROUP=$(ls -lta | awk '{print $4}')
      - docker ps -a
      - 'ls -lta'
      - 'sudo chown $_USER:$_GROUP -Rv *'
      - sudo mv .coverage .coverage.tests
      ################################################################################################
      # NOTE: https://coverage.readthedocs.io/en/coverage-4.5.1/changes.html?highlight=clean
      # Version 4.2b1 - 2016-07-04
      # BACKWARD INCOMPATIBILITY: the coverage combine command now ignores an existing .coverage data file. It used to include that file in its combining. This caused confusing results, and extra tox "clean" steps. If you want the old behavior, use the new coverage combine --append option.
      # ################################################################################################
      # NOTE: Version 4.5 - 2018-02-03
      # The coverage combine command used to always overwrite the data file, even when no data had been read from apparently combinable files. Now, an error is raised if we thought there were files to combine, but in fact none of them could be used. Fixes issue 629.
      - coverage combine
      # Coverage report contains Docker paths. We replace them, so that we can run Coveralls.
      - sed -i 's@\"/home/developer/app/@'"\"$(pwd)/"'@g' .coverage
      - coveralls debug
      - coveralls -v

before_install:
  - sudo apt-get update
  - travis_retry pip install coveralls
  - npm install -g gnomon

  - sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - sudo add-apt-repository "deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(lsb_release -cs) stable"
  - sudo apt-get update
  - sudo apt-cache search docker
  - apt-cache madison docker-ce
  - sudo apt-get --allow-downgrades -y -o Dpkg::Options::="--force-confnew" install docker-ce=$(apt-cache madison docker-ce | grep $DOCKER_VERSION | head -1 | awk '{print $3}')

  - sudo rm -f /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin
  - docker-compose --version
  - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
  # DISABLED: # - make ci-before_install | gnomon
  - make ci-before_install

notifications:
  email:
    recipients:
      - bossjones@theblacktonystark.com
    on_success: change # default: change
    on_failure: change # default: always


before_cache:
  - _USER=$(ls -lta | awk '{print $3}')
  - _GROUP=$(ls -lta | awk '{print $4}')
  - 'sudo chown $_USER:$_GROUP -Rv $HOME/.cache/pip $HOME/.wheelhouse/'

cache:
  directories:
    - $HOME/.wheelhouse/
    - $HOME/.cache/pip
    - $HOME/.travis_cache/
