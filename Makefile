# -*- coding: utf-8 -*-
# SOURCE: https://github.com/autopilotpattern/jenkins/blob/master/makefile
MAKEFLAGS += --warn-undefined-variables
# .SHELLFLAGS := -eu -o pipefail

# SOURCE: https://github.com/luismayta/zsh-servers-functions/blob/b68f34e486d6c4a465703472e499b1c39fe4a26c/Makefile
# Configuration.
SHELL = /bin/bash
ROOT_DIR = $(shell pwd)
PROJECT_BIN_DIR = $(ROOT_DIR)/bin
DATA_DIR = $(ROOT_DIR)/var
SCRIPT_DIR = $(ROOT_DIR)/script



# export CONTAINER_USER = $(shell whoami)
# export CONTAINER_UID  = $(shell id -u)
# export CONTAINER_GID  = $(shell id -g)

# # Workspace
# CURRENT_DIR := $(shell pwd)
# DETECTED_OS := $(shell uname -s)
# WHOAMI      := $(shell whoami)
# # home directory based on passwd file. Normally this will always be what we want to use, however IT jenkins does not obey this scenario.
# USER_BASE_DIR := $(shell echo ~$(WHOAMI))
# BASH_LOCATION := $(shell which bash)

# # SOURCE: https://stackoverflow.com/questions/5553352/how-do-i-check-if-file-exists-in-makefile-so-i-can-delete-it
# # SOURCE: https://smnd.sk/anino/programming/tools/gnumake/make_74.html#SEC73
# ifeq (${DETECTED_OS}, Darwin)
# 	HOME_DIR    ?= /Users/$(WHOAMI)
# 	SHELL       := /usr/local/bin/bash
# 	OS_X        := true
# 	ARCHFLAGS="-arch x86_64"
# 	PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig
# 	LDFLAGS="-L/usr/local/opt/openssl/lib"
# 	CFLAGS="-I/usr/local/opt/openssl/include"
# # if this is running on jenkins
# else ifneq (findstring jnks,$(WHOAMI))
# 	HOME_DIR    ?= /home/jenkins
# 	SHELL       := /bin/bash
# 	OS_X        := false
# else
# 	HOME_DIR    ?= $(USER_BASE_DIR)
# 	SHELL       := $(BASH_LOCATION)
# 	OS_X        := false
# endif


WGET = wget

# CRUD_INTERFACES:=$(shell grep "," ultron8/api/crud/__init__.py | grep -v "^#" | tr ',' '\n' | xargs)
CRUD_INTERFACES:=$(shell $(SCRIPT_DIR)/get_crud_interfaces)

# Bin scripts
# PYENV_SETUP = $(shell) $(SCRIPT_DIR)/pyenv_setup.sh

ONLY_RUN ?= packsonly

CI_PYENV_DOCKER_IMAGE := bossjones/docker-pyenv:latest
CI_IMAGE := bossjones/ultron8-ci

VAGRANT_HOST_IP := 192.168.2.8

# SOURCE: https://github.com/wk8838299/bullcoin/blob/8182e2f19c1f93c9578a2b66de6a9cce0506d1a7/LMN/src/makefile.osx
HAVE_BREW=$(shell brew --prefix >/dev/null 2>&1; echo $$? )


.PHONY: list help default all check fail-when-git-dirty

.PHONY: FORCE_MAKE

PR_SHA                := $(shell git rev-parse HEAD)

define ASCILOGO
ultron8
=======================================
endef

export ASCILOGO

# http://misc.flogisoft.com/bash/tip_colors_and_formatting

RED=\033[0;31m
GREEN=\033[0;32m
ORNG=\033[38;5;214m
BLUE=\033[38;5;81m
NC=\033[0m

export RED
export GREEN
export NC
export ORNG
export BLUE

# verify that certain variables have been defined off the bat
check_defined = \
		$(foreach 1,$1,$(__check_defined))
__check_defined = \
		$(if $(value $1),, \
			$(error Undefined $1$(if $(value 2), ($(strip $2)))))

export PATH := ./script:./bin:./bash:./venv/bin:$(PATH)

MKFILE_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))
CURRENT_FOLDER := $(notdir $(patsubst %/,%,$(dir $(MKFILE_PATH))))
CURRENT_DIR := $(shell pwd)
MAKE := make
PY_MODULE_NAME := ultron8

list_allowed_args := product ip command role tier cluster non_root_user host

default: all

all: info

# # coverage flags, these all come from here
# # SOURCE: https://media.readthedocs.org/pdf/pytest-cov/latest/pytest-cov.pdf
# test_args_no_xml    := --cov-report=
# test_args_with_xml  := --cov-report term-missing --cov-report xml:cov.xml --cov-report html:htmlcov --cov-report annotate:cov_annotate --benchmark-skip
# test_args           := --cov-report term-missing --cov-report xml --junitxml junit.xml
# cover_args          := --cov-report html

##############################################################################
# Auto generated from pygitrepo 0.0.27
#
# This Makefile is a dev-ops tool set.
# Compatible with:
#
# - Windows
# - MacOS
# - MacOS + pyenv + pyenv-virtualenv tool set
# - Linux
#
# The file structure should like this:
#
# repo_dir
#     |--- make (collection of Makefile)
#         |--- python_env.mk (python environment relative Makefile)
#     |--- source_dir (package source code dir)
#         |--- __init__.py
#         |--- ...
#     |--- build (build python installation file tmp dir)
#     |--- dist (distribution python install file tmp dir)
#     |--- docs (documents dir)
#         |--- build (All build html will be here)
#         |--- source (doc source)
#         |--- Makefile (auto-generated by sphinx)
#         |--- make.bat (for windows)
#     |--- tests (unittest dir)
#         |--- all.py (run all test from python)
#         |--- ... (other test)
#     |--- README.rst (readme file)
#	  |--- readthedocs.yml (ReadTheDocs builder config file)
#     |--- release-history.rst
#     |--- setup.py (installation behavior definition)
#     |--- requirements.txt (dependencies)
#     |--- requirements-dev.txt (dependencies for dev)
#     |--- requirements-doc.txt (dependencies for doc)
#     |--- requirements-test.txt (dependencies for test)
#     |--- LICENSE.txt
#	  |--- AUTHORS.rst
#     |--- MANIFEST.in (specified files need to be included in source code archive)
#     |--- tox.ini (tox setting)
#     |--- .travis.yml (travis-ci setting)
#     |--- .coveragerc (code coverage text setting)
#     |--- .gitattributes (git attribute file)
#     |--- .gitignore (git ignore file)
#	  |--- .circleci (circle-ci setting)
#     |--- fixcode.py (autopep8 source code and unittest code)
#
# Frequently used make command:
#
# - make up
# - make clean
# - make install
# - make test
# - make tox
# - make build_doc
# - make view_doc
# - make deploy_doc
# - make reformat
# - make publish


#--- User Defined Variable ---
PACKAGE_NAME="ultron8"

# Python version Used for Development
PY_VER_MAJOR="3"
PY_VER_MINOR="7"
PY_VER_MICRO="4"

#  Other Python Version You Want to Test With
# (Only useful when you use tox locally)
TEST_PY_VER3="3.7.4"

# If you use pyenv-virtualenv, set to "Y"
USE_PYENV="Y"

# S3 Bucket Name
DOC_HOST_BUCKET_NAME="NoBucket"


#--- Derive Other Variable ---

# Virtualenv Name
VENV_NAME="${PACKAGE_NAME}_venv${PY_VER_MAJOR}${PY_VER_MINOR}${PY_VER_MICRO}"

# Project Root Directory
GIT_ROOT_DIR=${shell git rev-parse --show-toplevel}
PROJECT_ROOT_DIR=${shell pwd}

OS=${shell uname -s}

ifeq (${OS}, Windows_NT)
		DETECTED_OS := Windows
else
		DETECTED_OS := $(shell uname -s)
endif


# ---------

# Windows
ifeq (${DETECTED_OS}, Windows)
		USE_PYENV="N"

		VENV_DIR_REAL="${PROJECT_ROOT_DIR}/${VENV_NAME}"
		BIN_DIR="${VENV_DIR_REAL}/Scripts"
		SITE_PACKAGES="${VENV_DIR_REAL}/Lib/site-packages"
		SITE_PACKAGES64="${VENV_DIR_REAL}/Lib64/site-packages"

		GLOBAL_PYTHON="/c/Python${PY_VER_MAJOR}${PY_VER_MINOR}/python.exe"
		OPEN_COMMAND="start"
endif


# MacOS
ifeq (${DETECTED_OS}, Darwin)

ifeq ($(USE_PYENV), "Y")
		ARCHFLAGS="-arch x86_64"
		PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig
		LDFLAGS="-L/usr/local/opt/openssl/lib"
		CFLAGS="-I/usr/local/opt/openssl/include"
		VENV_DIR_REAL="${HOME}/.pyenv/versions/${PY_VERSION}/envs/${VENV_NAME}"
		VENV_DIR_LINK="${HOME}/.pyenv/versions/${VENV_NAME}"
		BIN_DIR="${VENV_DIR_REAL}/bin"
		SITE_PACKAGES="${VENV_DIR_REAL}/lib/python${PY_VER_MAJOR}.${PY_VER_MINOR}/site-packages"
		SITE_PACKAGES64="${VENV_DIR_REAL}/lib64/python${PY_VER_MAJOR}.${PY_VER_MINOR}/site-packages"
else
		ARCHFLAGS="-arch x86_64"
		PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig
		LDFLAGS="-L/usr/local/opt/openssl/lib"
		CFLAGS="-I/usr/local/opt/openssl/include"
		# VENV_DIR_REAL="${PROJECT_ROOT_DIR}/${VENV_NAME}"
		# VENV_DIR_LINK="./${VENV_NAME}"
		VENV_DIR_REAL="${HOME}/.pyenv/versions/${PY_VERSION}/envs/${VENV_NAME}"
		VENV_DIR_LINK="${HOME}/.pyenv/versions/${VENV_NAME}"
		BIN_DIR="${VENV_DIR_REAL}/bin"
		SITE_PACKAGES="${VENV_DIR_REAL}/lib/python${PY_VER_MAJOR}.${PY_VER_MINOR}/site-packages"
		SITE_PACKAGES64="${VENV_DIR_REAL}/lib64/python${PY_VER_MAJOR}.${PY_VER_MINOR}/site-packages"
endif
		ARCHFLAGS="-arch x86_64"
		PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig
		LDFLAGS="-L/usr/local/opt/openssl/lib"
		CFLAGS="-I/usr/local/opt/openssl/include"

		GLOBAL_PYTHON="python${PY_VER_MAJOR}.${PY_VER_MINOR}"
		OPEN_COMMAND="open"
endif


# Linux
ifeq (${DETECTED_OS}, Linux)
		USE_PYENV="N"

		VENV_DIR_REAL="${PROJECT_ROOT_DIR}/${VENV_NAME}"
		VENV_DIR_LINK="${PROJECT_ROOT_DIR}/${VENV_NAME}"
		BIN_DIR="${VENV_DIR_REAL}/bin"
		SITE_PACKAGES="${VENV_DIR_REAL}/lib/python${PY_VER_MAJOR}.${PY_VER_MINOR}/site-packages"
		SITE_PACKAGES64="${VENV_DIR_REAL}/lib64/python${PY_VER_MAJOR}.${PY_VER_MINOR}/site-packages"

		GLOBAL_PYTHON="python${PY_VER_MAJOR}.${PY_VER_MINOR}"
		OPEN_COMMAND="open"
endif


BASH_PROFILE_FILE = "${HOME}/.bash_profile"

BIN_ACTIVATE="${BIN_DIR}/activate"
BIN_PYTHON="${BIN_DIR}/python"
BIN_PIP="${BIN_DIR}/pip"
BIN_ISORT="${BIN_DIR}/isort"
BIN_JINJA="${BIN_DIR}/jinja2"
BIN_SPHINX_START="${BIN_DIR}/sphinx-quickstart"
BIN_TWINE="${BIN_DIR}/twine"
BIN_TOX="${BIN_DIR}/tox"
BIN_JUPYTER="${BIN_DIR}/jupyter"
BIN_PYTEST="${BIN_DIR}/pytest"

RTD_DOC_URL="https://ultron8.readthedocs.io/index.html"


PY_VERSION="${PY_VER_MAJOR}.${PY_VER_MINOR}.${PY_VER_MICRO}"

.PHONY: help
help: ## ** Show this help message
	@perl -nle'print $& if m{^[a-zA-Z_-]+:.*?## .*$$}' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

#--- Make Commands ---
.PHONY: info
info: ## ** Show information about python, pip in this environment
	@printf "Info:\n"
	@printf "=======================================\n"
	@printf "$$GREEN venv:$$NC                               ${VENV_DIR_REAL}\n"
	@printf "$$GREEN python executable:$$NC                  ${BIN_PYTHON}\n"
	@printf "$$GREEN pip executable:$$NC                     ${BIN_PIP}\n"
	@printf "$$GREEN site-packages:$$NC                      ${SITE_PACKAGES}\n"
	@printf "$$GREEN site-packages64:$$NC                    ${SITE_PACKAGES64}\n"
	@printf "$$GREEN venv-dir-real:$$NC                      ${VENV_DIR_REAL}\n"
	@printf "$$GREEN venv-dir-link:$$NC                      ${VENV_DIR_LINK}\n"
	@printf "$$GREEN venv-bin-dir:$$NC                       ${BIN_DIR}\n"
	@printf "$$GREEN bash-profile-file:$$NC                  ${BASH_PROFILE_FILE}\n"
	@printf "$$GREEN bash-activate:$$NC                      ${BIN_ACTIVATE}\n"
	@printf "$$GREEN bin-python:$$NC                         ${BIN_PYTHON}\n"
	@printf "$$GREEN bin-isort:$$NC                          ${BIN_ISORT}\n"
	@printf "$$GREEN py-version:$$NC                         ${PY_VERSION}\n"
	@printf "$$GREEN use-pyenv:$$NC                          ${USE_PYENV}\n"
	@printf "$$GREEN venv-name:$$NC                          ${VENV_NAME}\n"
	@printf "$$GREEN git-root-dir:$$NC                       ${GIT_ROOT_DIR}\n"
	@printf "$$GREEN project-root-dir:$$NC                   ${PROJECT_ROOT_DIR}\n"
	@printf "$$GREEN brew-is-installed:$$NC                  ${HAVE_BREW}\n"
	@printf "\n"

#--- Virtualenv ---
.PHONY: brew_install_pyenv
brew_install_pyenv: ## ** Install pyenv and pyenv-virtualenv
	-brew install pyenv
	-brew install pyenv-virtualenv

.PHONY: setup_pyenv
setup_pyenv: brew_install_pyenv enable_pyenv ## ** Do some pre-setup for pyenv and pyenv-virtualenv
	pyenv install ${PY_VERSION} -s
	pyenv rehash

.PHONY: bootstrap_venv
bootstrap_venv: pre_commit_install init_venv dev_dep show_venv_activate_cmd ## ** Create virtual environment, initialize it, install packages, and remind user to activate after make is done
# bootstrap_venv: init_venv dev_dep ## ** Create virtual environment, initialize it, install packages, and remind user to activate after make is done

.PHONY: bootstrap
bootstrap: pip-tools bootstrap_venv

.PHONY: init_venv
init_venv: ## ** Initiate Virtual Environment
ifeq (${USE_PYENV}, "Y")
ifneq ("$(wildcard $(VENV_DIR_REAL))","")
	@printf "=======================================\n"
	@printf "$$GREEN virtualenv alredy exists ${VENV_NAME}:$$NC\n"
	@printf "=======================================\n"
else
	@printf "=======================================\n"
	@printf "$$GREEN Creating virtualenv ${VENV_NAME}:$$NC\n"
	-pyenv virtualenv ${PY_VERSION} ${VENV_NAME}
	@printf "FINISHED:\n"
	@printf "=======================================\n"
	@printf "$$GREEN Run to activate virtualenv:$$NC                               pyenv activate ${VENV_NAME}\n"
	@printf "$$GREEN After you activate run the following:$$NC                               pyenv rehash\n"
	-pyenv rehash
endif

else

ifeq ($(HAVE_BREW), 0)
	DEPSDIR='ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include"'
	$(DEPSDIR) virtualenv -p ${GLOBAL_PYTHON} ${VENV_NAME}
endif

	virtualenv -p ${GLOBAL_PYTHON} ${VENV_NAME}
endif


.PHONY: up
up: init_venv ## ** Set Up the Virtual Environment


.PHONY: clean_venv
clean_venv: ## ** Clean Up Virtual Environment
ifeq (${USE_PYENV}, "Y")
	-pyenv uninstall -f ${VENV_NAME}
else
	test -r ${VENV_DIR_REAL} || echo "DIR exists: ${VENV_DIR_REAL}" || rm -rv ${VENV_DIR_REAL}
endif


#--- Install ---

.PHONY: uninstall
uninstall: ## ** Uninstall This Package
	# -${BIN_PIP} uninstall -y ${PACKAGE_NAME}
	-${BIN_PIP} uninstall -y requirements.txt

.PHONY: install
# install: uninstall ## ** Install This Package via setup.py
install: ## ** Install This Package via setup.py
ifeq ($(HAVE_BREW), 0)
	DEPSDIR='ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include"'
	$(DEPSDIR) ${BIN_PIP} install -r requirements.txt
else
	${BIN_PIP} install -r requirements.txt
endif


.PHONY: dev_dep
dev_dep: ## ** Install Development Dependencies

ifeq ($(HAVE_BREW), 0)
	( \
		cd ${PROJECT_ROOT_DIR}; \
		ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" ${BIN_PIP} install -r requirements.txt; \
		ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" ${BIN_PIP} install -r requirements-dev.txt; \
		ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" ${BIN_PIP} install -r requirements-doc.txt; \
		ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" ${BIN_PIP} install -r requirements-test.txt; \
	)
else
	( \
		cd ${PROJECT_ROOT_DIR}; \
		${BIN_PIP} install -r requirements.txt; \
		${BIN_PIP} install -r requirements-dev.txt; \
		${BIN_PIP} install -r requirements-test.txt; \
		${BIN_PIP} install -r requirements-doc.txt; \
	)
endif

.PHONY: install-dev
install-dev: dev_dep ## ** Install Development Dependencies


.PHONY: show_venv_activate_cmd
show_venv_activate_cmd: ## ** Show activate command when finished
	@printf "Don't forget to run this activate your new virtualenv:\n"
	@printf "=======================================\n"
	@echo
	@printf "$$GREEN pyenv activate $(VENV_NAME)$$NC\n"
	@echo
	@printf "=======================================\n"

# Frequently used make command:
#
# - make up
# - make clean
# - make install
# - make test
# - make tox
# - make build_doc
# - make view_doc
# - make deploy_doc
# - make reformat
# - make publish

###########################################################
# Pyenv initilization - 12/23/2018 -- END
# SOURCE: https://github.com/MacHu-GWU/learn_datasette-project/blob/120b45363aa63bdffe2f1933cf2d4e20bb6cbdb8/make/python_env.mk
###########################################################

.PHONY: list
list:
	@$(MAKE) -qp | awk -F':' '/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$$)/ {split($$1,A,/ /);for(i in A)print A[i]}' | sort

# Compile python modules against homebrew openssl. The homebrew version provides a modern alternative to the one that comes packaged with OS X by default.
# OS X's older openssl version will fail against certain python modules, namely "cryptography"
# Taken from this git issue pyca/cryptography#2692
.PHONY: install-virtualenv-osx
install-virtualenv-osx:
	ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pip install -r requirements.txt

.PHONY: pre_commit_install
pre_commit_install: pre-commit-install
# -cp git_hooks/.pre-commit-config.yaml .git/hooks/pre-commit

.PHONY: travis-pull
travis-pull: ## pull base and run-image tags
	docker pull $(CI_IMAGE):base || true
	docker pull $(CI_IMAGE):runtime-image || true

.PHONY: travis-build
travis-build: ## simply build docker image using docker-compose
	docker-compose -f docker-compose.ci.yml build

.PHONY: travis
travis: travis-pull travis-build dc-up-web ci-test ## Bring up web server using docker-compose, then exec into container and run pytest
# tox

.PHONY: run-black-check
run-black-check: ## CHECK MODE: sensible pylint ( Lots of press over this during pycon 2018 )
	black --check --exclude=ultron8_venv*,*.eggs --verbose .

.PHONY: run-black
run-black: ## sensible pylint ( Lots of press over this during pycon 2018 )
	black --verbose --exclude=ultron8_venv*,*.eggs .

.PHONY: pip-tools
pip-tools:
ifeq (${DETECTED_OS}, Darwin)
	ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pip install pip-tools pipdeptree
else
	pip install pip-tools pipdeptree
endif

.PHONY: pip-tools-osx
pip-tools-osx: pip-tools

.PHONY: pip-tools-upgrade
pip-tools-upgrade:
ifeq (${DETECTED_OS}, Darwin)
	ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pip install pip-tools pipdeptree --upgrade
else
	pip install pip-tools pipdeptree --upgrade
endif

.PHONY: pip-compile-upgrade-all
pip-compile-upgrade-all: pip-tools
	pip-compile --output-file requirements.txt requirements.in --upgrade
	pip-compile --output-file requirements-dev.txt requirements-dev.in --upgrade
	pip-compile --output-file requirements-test.txt requirements-test.in --upgrade
	pip-compile --output-file requirements-doc.txt requirements-doc.in --upgrade
	pip-compile --output-file requirements-experimental.txt requirements-experimental.in --upgrade

.PHONY: pip-compile
pip-compile: pip-tools
	pip-compile --output-file requirements.txt requirements.in
	pip-compile --output-file requirements-dev.txt requirements-dev.in
	pip-compile --output-file requirements-test.txt requirements-test.in
	pip-compile --output-file requirements-doc.txt requirements-doc.in
	pip-compile --output-file requirements-experimental.txt requirements-experimental.in

.PHONY: pip-compile-rebuild
pip-compile-rebuild: pip-tools
	pip-compile --rebuild --output-file requirements.txt requirements.in
	pip-compile --rebuild --output-file requirements-dev.txt requirements-dev.in
	pip-compile --rebuild --output-file requirements-test.txt requirements-test.in
	pip-compile --rebuild --output-file requirements-doc.txt requirements-doc.in
	pip-compile --rebuild --output-file requirements-experimental.txt requirements-experimental.in

.PHONY: install-deps-all
install-deps-all:
ifeq (${DETECTED_OS}, Darwin)
	PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pip install -r requirements.txt
	PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pip install -r requirements-dev.txt
	PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pip install -r requirements-test.txt
	PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pip install -r requirements-doc.txt
	PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pip install -r requirements-experimental.txt
else
	pip install -r requirements.txt
	pip install -r requirements-dev.txt
	pip install -r requirements-test.txt
	pip install -r requirements-doc.txt
	pip install -r requirements-experimental.txt
endif

.PHONY: pip-compile-and-install
pip-compile-and-install: pip-compile install-deps-all ## generate requirement.txt files, then install all of those dependencies

.PHONY: install-all
install-all: install-deps-all

.PHONY: yamllint-role
yamllint-role:
	bash -c "find .* -type f -name '*.y*ml' ! -name '*.venv' -print0 | xargs -I FILE -t -0 -n1 yamllint FILE"

.PHONY: install-ip-cmd-osx
install-ip-cmd-osx:
	brew install iproute2mac

.PHONY: flush-cache
flush-cache:
	@sudo killall -HUP mDNSResponder


###############################

# A Self-Documenting Makefile: http://marmelab.com/blog/2016/02/29/auto-documented-makefile.html

.PHONY: git-clean git-env pipenv-test pipenv-test-cover pipenv-test-cli help2

.PHONY: git-clean
git-clean: ## Remove files and directories ignored by git
	git clean -d -X -f

.PHONY: check-python
check-python:
	./script/check-python

.PHONY: pipenv-env
pipenv-env: ## Run `pipenv install --dev` to create dev environment
ifeq (${DETECTED_OS}, Darwin)
	PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pipenv --python 3
	PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pipenv install --dev
else
	pipenv --python 3
	pipenv install --dev
endif

.PHONY: pipenv-test
pipenv-test: ## Run tests
	pipenv run py.test

.PHONY: pipenv-test-cover
pipenv-test-cover: ## Run tests - with coverage report
	pipenv run py.test --cov=. --cov-report=term-missing

.PHONY: pipenv-test-cli
pipenv-test-cli: ## Run CLI with example Via JSON data
	pipenv run image-annotation-convert tests/annotation-data/via_example.json --output-format=sensei_csv

.PHONY: help2
help2:
	@grep -E '^[a-zA-Z0-9_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

.PHONY: docker-pyenv-cli
docker-pyenv-cli:
	docker run --rm -it \
	-w /mnt \
	-v $(CURRENT_DIR):/mnt \
	$(CI_PYENV_DOCKER_IMAGE) bash

.PHONY: download-roles
download-roles: ## Download ansible roles in local directory ./roles/
	ansible-galaxy install -r requirements.yml --roles-path ./roles/

.PHONY: download-roles-force
download-roles-force: ## FORCE Download ansible roles in local directory ./roles/
	ansible-galaxy --force install -r requirements.yml --roles-path ./roles/

.PHONY: download-roles-global
download-roles-global: ## Download ansible roles in global directory /etc/ansible/roles
	ansible-galaxy install -r requirements.yml --roles-path=/etc/ansible/roles

.PHONY: download-roles-global-force
download-roles-global-force: ## FORCE Download ansible roles in global directory /etc/ansible/roles
	ansible-galaxy install --force -r requirements.yml --roles-path=/etc/ansible/roles

.PHONY: vagrant-ansible-provision
vagrant-ansible-provision: download-roles-global
	ansible-playbook -vv -c local -i inventory.ini vagrant_playbook.yml


.PHONY: docker-compose-build
docker-compose-build:
	@docker-compose -f hacking/docker-compose.yml build

.PHONY: docker-compose-build-playground
docker-compose-build-playground:
	@docker-compose -f hacking/docker-compose.yml build playground

.PHONY: docker-compose-run-playground-bash
docker-compose-run-playground-bash:
	@docker-compose -f hacking/docker-compose.yml run --name ultron_playground --rm playground bash

.PHONY: docker-compose-run-playground
docker-compose-run-playground:
	-@docker-compose -f hacking/docker-compose.yml rm --force playground
	@docker-compose -f hacking/docker-compose.yml run -d --name ultron_playground --rm playground

.PHONY: docker-compose-build-master
docker-compose-build-master:
	@docker-compose -f hacking/docker-compose.yml build master

.PHONY: docker-compose-run-master
docker-compose-run-master:
	@docker-compose -f hacking/docker-compose.yml run --name ultron_master --rm master bash

.PHONY: docker-compose-run-test
docker-compose-run-test:
	@docker-compose -f hacking/docker-compose.yml run --name ultron_test --rm test bash python3 --version

.PHONY: docker-compose-up
docker-compose-up:
	@docker-compose -f hacking/docker-compose.yml up -d

.PHONY: docker-compose-up-build
docker-compose-up-build:
	@docker-compose -f hacking/docker-compose.yml up --build

.PHONY: docker-compose-up-build-d
docker-compose-up-build-d:
	@docker-compose -f hacking/docker-compose.yml up -d --build

.PHONY: docker-compose-down
docker-compose-down:
	@docker-compose -f hacking/docker-compose.yml down

.PHONY: docker-version
docker-version:
	@docker --version
	@docker-compose --version

# --------------------------------------------------------------------------------------------------------------------
# SOURCE: https://github.com/kennethreitz/requests
# --------------------------------------------------------------------------------------------------------------------

.PHONY: pipenv-init
pipenv-init: ## Run `pipenv install --dev` to create dev environment
ifeq (${DETECTED_OS}, Darwin)
	PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pip install pipenv --upgrade
	PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pipenv --python 3.7.4
else
	pip install pipenv --upgrade
	pipenv --python 3.7.4
endif

.PHONY: pipenv-dev
pipenv-dev: ## Run `pipenv install --dev` to create dev environment
ifeq (${DETECTED_OS}, Darwin)
	PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pipenv install --dev
	PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pipenv install -e .
else
	pipenv install --dev
	pipenv install -e .
endif

.PHONY: pipenv-install
pipenv-install: ## Run `pipenv install --dev` to create dev environment
ifeq (${DETECTED_OS}, Darwin)
	PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pipenv install
	PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig ARCHFLAGS="-arch x86_64" LDFLAGS="-L/usr/local/opt/openssl/lib" CFLAGS="-I/usr/local/opt/openssl/include" pipenv install -e .
else
	pipenv install
	pipenv install -e .
endif

.PHONY: pipenv-bootstrap
pipenv-bootstrap: pipenv-init pipenv-dev

.PHONY: pipenv-activate
pipenv-activate:
	@echo "Run: pipenv shell"

.PHONY: test-coverage
test-coverage:
	pytest --capture=no --cov-report html --cov=. tests

# ci:
# # pipenv run py.test -n 8 --boxed --junitxml=report.xml
# 	export $(\cat .env.dist | xargs) && \
# 	echo " [run] alembic upgrade head" && \
# 	alembic upgrade head && \
# 	echo " [run] kick off ultron8/api/tests_pre_start.py" && \
# 	python ultron8/api/tests_pre_start.py && \
# 	py.test --cov-config .coveragerc \
# 	--verbose --cov-append --cov-report term-missing \
# 	--cov-report xml:cov.xml --cov-report html:htmlcov \
# 	--cov-report annotate:cov_annotate \
# 	--mypy \
# 	--showlocals \
# 	--tb=short \
# 	--cov=ultron8 \
# 	tests

.PHONY: ci
ci:
	echo " [run] alembic upgrade head"
	pipenv run alembic upgrade head
	echo " [run] kick off ultron8/api/tests_pre_start.py"
	pipenv run python ultron8/api/tests_pre_start.py
	pipenv run py.test --cov-config .coveragerc \
	--verbose --cov-append --cov-report term-missing \
	--cov-report xml:cov.xml --cov-report html:htmlcov \
	--cov-report annotate:cov_annotate \
	--mypy \
	--showlocals \
	--tb=short \
	--cov=ultron8 \
	tests

.PHONY: test-readme
test-readme:
	@pipenv run python setup.py check --restructuredtext --strict && ([ $$? -eq 0 ] && echo "README.rst and HISTORY.rst ok") || echo "Invalid markup in README.rst or HISTORY.rst!"

.PHONY: flake8
flake8:
# pipenv run flake8 --config=$(CURRENT_DIR)/lint-configs-python/.flake8 --ignore=E501,F401,E128,E402,E731,F821 ultron8
	pipenv run flake8 --config=$(CURRENT_DIR)/lint-configs-python/python/.flake8 $(PACKAGE_NAME)

.PHONY: coverage
coverage:
	pipenv run py.test --cov-config .coveragerc --verbose --cov-report term --cov-report xml --cov=$(PACKAGE_NAME) tests

.PHONY: lint-configs-subtree
lint-configs-subtree:
	git subtree add --prefix lint-configs-python https://github.com/bossjones/lint-configs-python.git master --squash

.PHONY: docker-machine-create
docker-machine-create:
	docker-machine create \
	--driver generic \
	--generic-ip-address=$(VAGRANT_HOST_IP) \
	--generic-ssh-key ~/.ssh/vagrant_id_rsa \
	$(PACKAGE_NAME)

.PHONY: docker-machine-env-print
docker-machine-env-print:
	@printf "=======================================\n"
	@printf "$$GREEN docker-machine $(PACKAGE_NAME) created:$$NC\n"
	@printf "=======================================\n"
	@printf "$$BLUE - POST STEPS:$$NC\n"
	@printf "=======================================\n"
	@printf "$$ORNG     [RUN] $$(print-dm-eval) $$NC\n"

.PHONY: install-poetry
install-poetry:
	curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python

.PHONY: install-debug-tools
install-debug-tools:
	[ -d /usr/local/src/debug-tools ] || sudo git clone https://github.com/bossjones/debug-tools /usr/local/src/debug-tools
	sudo chown -R vagrant:vagrant /usr/local/src/debug-tools
	sudo /usr/local/src/debug-tools/update-bossjones-debug-tools

.PHONY: bandit
bandit:
# pipenv run bandit -r ./create_aio_app -x create_aio_app/template -s B101
	pipenv run bandit -r ./ultron8 -s B101

.PHONY: checkrst
checkrst:
	pipenv run python setup.py check --restructuredtext

.PHONY: pyroma
pyroma:
	pipenv run pyroma -d .

.PHONY: flake
flake: checkrst bandit pyroma
	pipenv run flake8 ultron8 setup.py

.PHONY: pipenv-lock
pipenv-lock:
	pipenv lock

.PHONY: copy-contrib
copy-contrib:
	copy-contrib

.PHONY: generate-new-pipefile
generate-new-pipefile:
	bash script/generate-new-pipefile


##############################################################################################
# python dev work
##############################################################################################
# SOURCE: https://pypi.org/project/pipenv-to-requirements/

.PHONY: py-dev
py-dev:
	pipenv install --dev
	pipenv run pip install -e .

.PHONY: py-dists
py-dists: py-sdist py-bdist py-wheels

.PHONY: dist-build
dist-build: clean ## setup.py - create source distribution (taken directly from twine docs)
	python setup.py sdist bdist_wheel

.PHONY: create-dist
create-dist: py-dists  ## setup.py - create source distribution

.PHONY: upload-twine
upload-twine: ## twine - upload to pypi
	twine upload dist/*

.PHONY: py-sdist
py-sdist:
	pipenv run python setup.py sdist

.PHONY: py-bdist
py-bdist:
	pipenv run python setup.py bdist

.PHONY: py-wheels
py-wheels:
	pipenv run python setup.py bdist_wheel
##############################################################################################
# must call pyenv local first in order to use tox-pyenv
.PHONY: travis-ci
travis-ci: ## build image and run ci tests
	find . -name '*.pyc' -exec rm -fv {} +
	find . -name '*.pyo' -exec rm -fv {} +
	find . -name '__pycache__' -exec rm -frv {} +
	.ci/docker-test-build.sh
	.ci/docker-test.sh

# NUKE THE WORLD
.PHONY: nuke
nuke:
	rm -rf build/
	rm -rf dist/
	rm -fr .eggs/
	find . -name '*.egg-info' -exec rm -frv {} +
	find . -name '*.egg' -exec rm -fv {} +
	find . -name '*.pyc' -exec rm -fv {} +
	find . -name '*.pyo' -exec rm -fv {} +
	find . -name '*~' -print -exec rm -fv {} +
	find . -name '__pycache__' -exec rm -frv {} +


.PHONY: clean-test
clean-test: ## remove test and coverage artifacts
	rm -fr .tox/
	rm -f .coverage
	rm -fr htmlcov/

.PHONY: travis-pdb
travis-pdb:
	tox -e py37 -- --pdb --showlocals

.PHONY: clean-cache
clean-cache: ## clear all python cached bytecode eg *.pyc and __pycache__
	find . -name '*.pyc' | xargs rm
	find . -name '__pycache__' | xargs rm -rf

.PHONY: clean-coverge-files
clean-coverge-files:
	-rm -rf htmlcov/
	-rm -rf cov_annotate/
	-rm -rf cov.xml

.PHONY: lint
lint:
	./script/lint

.PHONY: test
test:
	./script/run_pytest

.PHONY: install-twine
install-twine:
	pip install twine

.PHONY: docker-bash
docker-bash:
	.ci/docker-bash.sh

.PHONY: local-ci
local-ci: clean-test
# pipenv run python setup.py test
	bash .ci/local-ci.sh

.PHONY: open-coverage-local
open-coverage-local:
	./script/open-browser.py htmlcov/index.html

.PHONY: docker-dev-build
docker-dev-build:
	.ci/docker-dev-build.sh

.PHONY: docker-dev-bash
docker-dev-bash:
	.ci/docker-dev-bash.sh

.PHONY: docker-test-build
docker-test-build:
	.ci/docker-test-build.sh

.PHONY: docker-test-bash
docker-test-bash:
	.ci/docker-test-bash.sh

.PHONY: docker-test
docker-test: clean-test docker-test-build
	.ci/docker-test.sh

.PHONY: dc-ci-build
dc-ci-build: clean-test
	.ci/dc-ci-build.sh

.PHONY: dc-ci-run
dc-ci-run: dc-ci-build
	.ci/dc-ci-run.sh

.PHONY: dc-ci-run-all
dc-ci-run-all: dc-ci-build
	.ci/dc-ci-run-all.sh

.PHONY: vscode-settings
vscode-settings:
	cp -a contrib/settings.json .vscode/settings.json

.PHONY: cp-vscode-settings
cp-vscode-settings:
	bash script/cp-vscode-settings

# -----------------------------------------------------------------------------
# SOURCE: https://github.com/aio-libs/aioredis/blob/master/Makefile
# -----------------------------------------------------------------------------
.PHONY: ultron8.egg-info
ultron8.egg-info:
	pip install -Ue .

.PHONY: devel
devel: ultron8.egg-info
	pip install -U pip
	pip install -U \
		sphinx \
		sphinx_rtd_theme \
		bumpversion \
		wheel

.PHONY: certificate
certificate:
	$(MAKE) -C tests/ssl

# -----------------------------------------------------------------------------
.PHONY: local-black-check
local-black-check: ## CHECK MODE: sensible pylint ( Lots of press over this during pycon 2018 )
	pipenv run black --check --exclude="/\.eggs|\.git|\.hg|\.mypy_cache|\.nox|\.tox|\.venv|_build|buck-out|build|dist|ultron8_venv*/" --verbose .

.PHONY: local-black
local-black: ## sensible pylint ( Lots of press over this during pycon 2018 )
	pipenv run black --verbose --exclude="/\.eggs|\.git|\.hg|\.mypy_cache|\.nox|\.tox|\.venv|_build|buck-out|build|dist|ultron8_venv*" .

.PHONY: black
black: local-black ## sensible pylint ( Lots of press over this during pycon 2018 )

.PHONY: local-dev
local-dev: pipenv-dev ## Run `pipenv install --dev` to create dev environment

.PHONY: local-reformat
local-reformat: ## ** Pep8 Format Source Code
	pipenv run ./fixcode.py

.PHONY: local-autopep8
local-autopep8: local-reformat ## ** Pep8 Format Source Code

.PHONY: local-pycodestyle
local-pycodestyle: ## **  Show the source code for each error, and even the relevant text from PEP 8
	pipenv run  pycodestyle --show-source --show-pep8 ultron8/

.PHONY: overwrite-pipefile
overwrite-pipefile:
	bash script/overwrite-pipefile

.PHONY: lock-pip-compile
lock-pip-compile: pip-compile

.PHONY: lock-pipfile
lock-pipfile: overwrite-pipefile

.PHONY: lock
lock: check-python lock-pip-compile lock-pipfile

.PHONY: lock-and-load
lock-and-load: lock pipenv-dev ## Run `make lock` then install all the new deps using `make pipenv-dev`

.PHONY: local-install-better_exceptions
local-install-better_exceptions:
	@printf "$$GREEN [info] Learn more https://github.com/Qix-/better-exceptions$$NC\n"
	@printf "=======================================\n"
	@printf "$$BLUE Run 'export BETTER_EXCEPTIONS=1' to enable$$NC\n"
	@printf "=======================================\n"
	pipenv run pip install better_exceptions

.PHONY: local-install-jupyter
local-install-jupyter:
	@printf "$$GREEN [important] Great guide to jupyter here: https://www.datacamp.com/community/tutorials/tutorial-jupyter-notebook$$NC\n"
	pipenv run pip install jupyter
	pipenv run pip install ipython-sql cython
	pipenv run python -m ipykernel install --user

	# SOURCE: https://ndres.me/post/best-jupyter-notebook-extensions/
	pipenv run pip install jupyter_nbextensions_configurator jupyter_contrib_nbextensions
	pipenv run jupyter contrib nbextension install --user
	pipenv run jupyter nbextensions_configurator enable --user
	# SOURCE: https://ipywidgets.readthedocs.io/en/latest/user_install.html
	pipenv run pip install ipywidgets
	pipenv run jupyter nbextension enable --py widgetsnbextension --sys-prefix

.PHONY: local-jupyter
local-jupyter:
	@printf "$$GREEN [important] Great guide to jupyter here: https://www.datacamp.com/community/tutorials/tutorial-jupyter-notebook$$NC\n"
	pipenv run jupyter notebook

local-notebook: local-jupyter

notebook: ## start jupyter notebook
	jupyter notebook

.PHONY: local-web
local-web:
	pipenv run uvicorn ultron8.web:app --reload

# SOURCE: https://github.com/ethereum/lahja
.PHONY: local-when-changed
local-when-changed:
	@printf "$$GREENDuring development, you might like to have tests run on every file save.$$NC\n"
	pipenv run when-changed -v -s -r -1 ultron8/ tests/ -c "clear; flake8 ultron8 tests && echo 'flake8 success' || echo 'error'"


# SOURCE: https://github.com/ethereum/lahja
.PHONY: local-pytest-watch
local-pytest-watch:
	@printf "$$GREENRun in one thread, with color and desktop notifications:$$NC\n"
	ptw --onfail "notify-send -t 5000 'Test failure ⚠⚠⚠⚠⚠' 'python 3 test on ultron8 failed'" ../tests ../ultron8


# -------------------------------------------------------------------------------------------
# SOURCE: https://github.com/ethereum/lahja/blob/master/Makefile - START
# -------------------------------------------------------------------------------------------

.PHONY: clean-build# Whole bunch of python make tasks for updating and changing things like docs, tags for releases, publishes, etc
clean-build: ## remove build artifacts
	rm -fr build/
	rm -fr dist/
	rm -fr *.egg-info

.PHONY: clean-pyc
clean-pyc: ## remove Python file artifacts
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +

.PHONY: clean
clean: clean-build clean-pyc ## clean build artifacts and python file artifacts

.PHONY: build-docs
build-docs:
	$(MAKE) -C docs clean
	$(MAKE) -C docs html
	$(MAKE) -C docs doctest

.PHONY: docs
docs: build-docs
	open docs/_build/html/index.html

.PHONY: release
release: clean
# git config commit.gpgSign true
	bumpversion $(bump)
	git push upstream && git push upstream --tags
	python setup.py sdist bdist_wheel
	twine upload dist/*
# git config commit.gpgSign "$(CURRENT_SIGN_SETTING)"

.PHONY: publish
publish: clean
	git push upstream master && git push upstream --tags
	python setup.py sdist bdist_wheel
	twine upload dist/*

.PHONY: dist
dist: clean
	python setup.py sdist bdist_wheel
	ls -l dist

# -------------------------------------------------------------------------------------------
# SOURCE: https://github.com/ethereum/lahja/blob/master/Makefile - END
# -------------------------------------------------------------------------------------------


# SOURCE: https://github.com/MacHu-GWU/pygitrepo-project/blob/d4eff888af6926cd3b0dde5c72cd42c23f941e02/pygitrepo/%7B%7B%20repo_name%20%7D%7D/make/python_env.mk

#--- Install ---

# .PHONY: uninstall
# uninstall: ## ** Uninstall This Package
# 	-${BIN_PIP} uninstall -y ${PACKAGE_NAME}

.PHONY: dev_install
dev_install: uninstall ## ** Install This Package in Editable Mode
	${BIN_PIP} install --editable .

.PHONY: doc_dep
doc_dep: ## Install Doc Dependencies
	( \
		cd ${PROJECT_ROOT_DIR}; \
		${BIN_PIP} install -r requirements-doc.txt; \
	)

#--- Sphinx Doc ---


.PHONY: init_doc
init_doc: doc_dep ## Initialize Sphinx Documentation Library
	{ \
		cd ${PROJECT_ROOT_DIR}/docs; \
		${BIN_SPHINX_START}; \
	}


.PHONY: build_doc
build_doc: doc_dep dev_install ## ** Build Documents, start over
	-rm -r ${PROJECT_ROOT_DIR}/docs/build
	-rm -r ${PROJECT_ROOT_DIR}/docs/source/${PACKAGE_NAME}
	( \
		cd ${PROJECT_ROOT_DIR}/docs; \
		make html; \
	)


.PHONY: build_doc_again
build_doc_again: ## Build Documents, skip re-install, skip cleanup-old-doc
	-rm -r ${PROJECT_ROOT_DIR}/docs/source/${PACKAGE_NAME}
	( \
		cd ${PROJECT_ROOT_DIR}/docs; \
		make html; \
	)


.PHONY: view_doc
view_doc: ## ** Open Sphinx Documents
	${OPEN_COMMAND} ${PROJECT_ROOT_DIR}/docs/build/html/index.html

.PHONY: clean_doc
clean_doc: ## Clean Existing Documents
	-rm -r ${PROJECT_ROOT_DIR}/docs/build


.PHONY: reformat
reformat: dev_dep ## ** Pep8 Format Source Code
	${BIN_PYTHON} ${PROJECT_ROOT_DIR}/fixcode.py

.PHONY: local-mypy
local-mypy:
	pipenv run mypy ultron8 tests

.PHONY: local-pylint
local-pylint:
	pipenv run pylint --rcfile ./lint-configs-python/python/pylintrc ultron8/consts.py
# pipenv run pylint --rcfile ./lint-configs-python/python/pylintrc --disable=R,C ultron8/

.PHONY: local-pylint-unresolved
local-pylint-unresolved:
# pipenv run pylint --rcfile ./lint-configs-python/python/pylintrc ultron8/consts.py
	pipenv run pylint --rcfile ./lint-configs-python/python/pylintrc --disable=all --enable=unresolved-import ultron8/

.PHONY: local-pylint-error
local-pylint-error:
	pipenv run pylint --rcfile ./lint-configs-python/python/pylintrc -E ultron8/

.PHONY: local-pytest
local-pytest:
	pipenv run py.test --cov-config .coveragerc --verbose --cov-report term --cov-report xml --cov=ultron8 tests

.PHONY: local-lint
local-lint: clean-test local-mypy local-pylint local-black local-pytest

.PHONY: dc-up-web
dc-up-web: dc-ci-build
	bash script/dc-up-web

.PHONY: dc-run-web
dc-run-web: dc-ci-build
	bash script/dc-run-web

.PHONY: dc-logs
dc-logs: ## Tail docker-compose logs
	bash script/dc-logs

.PHONY: dc-ci-exec-test
dc-ci-exec-test: dc-ci-build dc-up-web # Main entrypoint for running tests inside of docker-compose
	.ci/dc-ci-exec-test.sh

.PHONY: dc-ci-tail-dev-null
dc-ci-tail-dev-null: dc-ci-build # Starts up docker container via docker-compose using tail -f /dev/null
	.ci/dc-ci-tail-dev-null.sh

.PHONY: dc-build-cache-base
dc-build-cache-base: # build docker cache base and send up to docker hub
	.ci/dc-build-cache-base.sh

.PHONY: ci-before_install
ci-before_install: ## ci: docker container/image from gnzip tar file in $HOME/.cache/docker
	.ci/dc-build-gunzip-travis-stage-before_install.sh

.PHONY: ci-build
ci-build: ci-before_install dc-build-cache-base dc-up-web ci-gunzip # build docker cache base, cache it locally on machine and send up to docker hub etc

.PHONY: ci-gunzip
ci-gunzip: ## take contents of dockerfile and cache it locally into $HOME/.cache/docker
	.ci/dc-build-gunzip-travis-stage-install.sh

.PHONY: ci-bleeding
ci-bleeding: ci-build ci-gunzip ci-test

.PHONY: ci-test
ci-test: # Testing out new build to see if faster than before
	.ci/dc-ci-exec-test.sh

.PHONY: ci-experimental
ci-experimental: ci-build ci-test # Testing out new build to see if faster than before

.PHONY: migration-clean
migration-clean: ## Nuke all migrations scripts in the versions directory, nuke the local sqlite db then autogenerate again using shell command that greps all models together space delimited
	rm -rfv ultron8/migrations/versions/*.py
	git rm -rf ultron8/migrations/versions/*.py
	-rm test.db || true
	pipenv run alembic revision --autogenerate -m "Initial commit: $(CRUD_INTERFACES)"
	pipenv run alembic --raiseerr upgrade head

.PHONY: migration-clean-info
migration-clean-info:
	@echo "$(CRUD_INTERFACES)"

# SOURCE: https://alembic.sqlalchemy.org/en/latest/autogenerate.html
.PHONY: migration-revision
migration-revision:
	pipenv run alembic revision --autogenerate -m "create account table"

.PHONY: migration-run
migration-run:
	pipenv run alembic upgrade head

.PHONY: migration-info
migration-info:
	pipenv run alembic current

.PHONY: migration-history
migration-history:
	pipenv run alembic history --verbose

.PHONY: migration-restart
migration-restart: ## Downgrade alembic database to base migration, then upgrade all the way back up
	pipenv run alembic downgrade base
	pipenv run alembic upgrade head

.PHONY: build-cached
build-cached: ## docker-compose build wheelhouse version
	docker-compose -f docker-compose.cached.yml build | gnomon

.PHONY: pipenv_activate
pipenv_activate: ## Activate pipenv shell
	pipenv shell

.PHONY: pipenv_shell
pipenv_shell: pipenv_activate ## (alias) Activate pipenv shell

.PHONY: pre-commit-run
pre-commit-run: ## run pre-commit hooks across all files
	pre-commit run --all-files

.PHONY: pre-commit-install
pre-commit-install: ## install all pre-commit hooks
	pre-commit install -f --install-hooks

.PHONY: serve-daemon-pipenv
serve-daemon-pipenv: ## serve the web daemon from 'pipenv run'
	pipenv run serve-daemon

.PHONY: serve-daemon
serve-daemon: ## serve the web daemon from 'pipenv run'
	bash script/serve-daemon

.PHONY: ci-local
ci-local: ## run pytest using 'pipenv run'
	pipenv run bash script/local_pytest

.PHONY: ci-monkeytype-local
ci-monkeytype-local: ## run pytest using 'pipenv run'
	pipenv run bash script/local_monkeytype_pytest

.PHONY: ci-monkeytype-stub-apply-local
ci-monkeytype-stub-apply-local: ## run pytest stub as much as we can, then run apply those types to everything using 'pipenv run'
	pipenv run bash script/local_monkeytype_stub_apply_pytest

.PHONY: ci-local-only
ci-local-only: ## run pytest using 'pipenv run'
	pipenv run bash script/local_pytest_with_args $(ONLY_RUN)

.PHONY: local_pytest
local_pytest: ci-local ## [ALIAS for ci-local] run pytest using 'pipenv run'
local-pytest: ci-local ## [ALIAS for ci-local] run pytest using 'pipenv run'

.PHONY: ci-local-pdb
ci-local-pdb: ## run pytest WITH PDB using 'pipenv run'
	pipenv run bash script/local_pytest_pdb

.PHONY: ci-local-pdb-only
ci-local-pdb-only: ## run pytest using 'pipenv run' limited by ONLY_RUN=<pytest tag> with pdb enabled. Example: make ci-local-pdb-only ONLY_RUN=triggeronly
	pipenv run bash script/local_pytest_pdb_with_args $(ONLY_RUN)

.PHONY: local_pytest_pdb_with_args
local_pytest_pdb_with_args: ci-local-pdb-only ## run pytest using 'pipenv run' limited by ONLY_RUN=<pytest tag> with pdb enabled
local-pytest-pdb-with-args: ci-local-pdb-only ## run pytest using 'pipenv run' limited by ONLY_RUN=<pytest tag> with pdb enabled

.PHONY: local_pytest_pdb
local_pytest_pdb: ci-local-pdb ## [ALIAS for ci-local-pdb] run pytest WITH PDB using 'pipenv run'
local-pytest-pdb: ci-local-pdb ## [ALIAS for ci-local-pdb] run pytest WITH PDB using 'pipenv run'

.PHONY: open-coverage
open-coverage: ## Open coverage report inside of web browser
	./script/open-browser.py file://$(CURRENT_DIR)/htmlcov/index.html

# environment: ## setup pyenv environment
# 	$(PYENV_SETUP)

.PHONY: stubs
stubs: ## create stubs dir if it doesn't exist, used to provide type hinting
	mkdir stubs

.PHONY: stubgen
stubgen:
	stubgen --recursive -o stubs/ $(PY_MODULE_NAME)

.PHONY: travis-runner
travis-runner: ## mock run of entire travis run
	.ci/travis_runner.sh

.PHONY: lintcheck
lintcheck: ## lintcheck
	scrpt/lintcheck.sh

.PHONY: get-token
get-token: ## get token using httpie
	http -f POST http://localhost:11267/v1/login/access-token username=admin@ultron8.com password=password

.PHONY: open-openapi
open-openapi: ## Open browser with openapi
	./script/open-browser.py ${SERVER_HOST}/docs

.PHONY: completion
completion: ## Regenerate invoke auto completion see http://docs.pyinvoke.org/en/1.3/invoke.html#shell-tab-completion
	inv --print-completion-script zsh > ./contrib/invoke-completion.sh
