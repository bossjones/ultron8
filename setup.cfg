# SOURCE: https://github.com/MartinHeinz/python-project-blueprint/blob/master/setup.cfg
[build_docs]
source-dir = docs/
build-dir  = docs/_build
all_files  = 1

[upload_docs]
upload-dir = docs/_build/html

[bumpversion]
current_version = 0.1.0
commit = True
tag = True
parse = (?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)(-(?P<stage>[^.]*)\.(?P<devnum>\d+))?
serialize =
    {major}.{minor}.{patch}-{stage}.{devnum}
    {major}.{minor}.{patch}

[bumpversion:part:stage]
optional_value = stable
first_value = stable
values =
	alpha
	beta
	stable

[bumpversion:part:devnum]

[bumpversion:file:setup.py]
search = version='{current_version}'
replace = version='{new_version}'

[bumpversion:file:ultron8/__init__.py]
search = __version__ = '{current_version}'
replace = __version__ = '{new_version}'

[wheel]
universal = 1

[bdist_wheel]
universal = 1

[flake8]
# it's not a bug that we aren't using all of hacking, ignore:
# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting
# F401: imported but unused
# W604 backticks are deprecated, use 'repr()'
# F811 redefinition of unused 'mocker' from line 13
# F841 local variable 'mock_datadog_initialize' is assigned to but never used
# ignore the most ridiculous test added in v3.5.0
# (E741: do not use variables named 'l', 'O', or 'I'
ignore =
    E741
    F812
    H101
    H202
    H233
    H301
    H306
    H401
    H403
    H404
    H405
    H501
    F401
    W604
    F811
    F841
    E302
    E401
    E501
    E265
    E713
    E402
    D204
    D102
    D400
    D205
    D202
    D103
    D209
    D105
    D101
    D401
    D200
    E127
    D100
    E241
    E704
    E251
    W503
    W504
    E722
    W605

exclude =
    # No need to traverse our git directory
    .git,
    # There's no value in checking cache directories
    __pycache__,
    # The conf file is mostly autogenerated, ignore it
    docs/source/conf.py,
    # The old directory contains Flake8 2.0
    old,
    # This contains our built documentation
    build,
    # This contains builds of flake8 that we don't want to check
    dist,
    .svn,
    CVS,
    .bzr,
    .hg,
    .tox,
    docs,
    virtualenv_run,
    tests/*.,
    ultron8_venv*,
    ultron8_venv*/*
    .venv,
    www_static,
    venv,
    bin,
    lib,
    deps,
    tests/fixtures/simple/packs/linux/actions/checks,
    .eggs,
    stubs/*
max-line-length = 200
# max-complexity: which will emit a warning if the McCabe complexity of a function is higher than the value. By default it's deactivated.
max-complexity = 12

# [pep8]
# ignore = E741,F812,H101,H202,H233,H301,H306,H401,H403,H404,H405,H501,F401,W604,F811,F841,E302,E401,E501,E265,E713,E402,D204,D102,D400,D205,D202,D103,D209,D105,D101,D401,D200,E127,D100,E241,E704,E251,W503,W504,E722,W605
# max-line-length = 200
# max-complexity = 12

# W505 doc line too long (113 > 72 characters)
[pycodestyle]
select =
ignore = E741,F812,H101,H202,H233,H301,H306,H401,H403,H404,H405,H501,F401,W604,F811,F841,E302,E401,E501,E265,E713,E402,D204,D102,D400,D205,D202,D103,D209,D105,D101,D401,D200,E127,D100,E241,E704,E251,W503,W504,E722,W605,W505
max_line_length = 200
max_doc_length = 72

# EXAMPLE: https://docs.pytest.org/en/latest/goodpractices.html
[tool:pytest]
timeout = 60
testpaths = tests
norecursedirs =
    .git
    testing_config
    dist
    build
    .tox
    tests/fixtures/simple/packs/linux/actions/checks
# --cov-append

# SOURCE: https://github.com/aio-libs/aioredis/blob/master/setup.cfg
markers =
    run_loop: Mark coroutine to be run with asyncio loop.
    redis_version(*version, reason): Mark test expecting minimum Redis version
    skip(reason): Skip test
    mypy: marks tests dealing with mypy (deselect with '-m "not mypy"')
    usersonly: marks tests dealing with users (deselect with '-m "not usersonly"')
    loginonly: marks tests dealing with login (deselect with '-m "not loginonly"')
    actiononly: marks tests dealing with action (deselect with '-m "not actiononly"')
    unittest: marks tests dealing with unittest (deselect with '-m "not unittest"')
    packsonly: marks tests dealing with packs (deselect with '-m "not packsonly"')
    sensorsonly: marks tests dealing with sensors (deselect with '-m "not sensorsonly"')
    triggeronly: marks tests dealing with trigger (deselect with '-m "not triggeronly"')
    triggerinstanceonly: marks tests dealing with triggerinstance (deselect with '-m "not triggerinstanceonly"')
    triggertypeonly: marks tests dealing with triggertype (deselect with '-m "not triggertypeonly"')
    configonly: marks tests dealing with configs (deselect with '-m "not configonly"')
    baseconfigonly: marks tests dealing with baseconfigs (deselect with '-m "not baseconfigonly"')
    settingsonly: marks tests dealing with settings (deselect with '-m "not settingsonly"')
    workspaceonly: marks tests dealing with workspace (deselect with '-m "not workspaceonly"')
    clientonly: marks tests dealing with client (deselect with '-m "not clientonly"')
    pathsonly: marks tests dealing with settings (deselect with '-m "not pathsonly"')
addopts =  --cov-append --cov=ultron8 --cov-report term-missing --cov-report xml:cov.xml --cov-report html:htmlcov --cov-report annotate:cov_annotate --mypy --showlocals --tb=short
####################################################################################
# source: https://github.com/pytest-dev/pytest-mock
# Python 3 users might want to use a newest version of the mock package as
# published on PyPI than the one that comes with the Python distribution.
# This will force the plugin to import mock instead of the unittest.mock
# module bundled with Python 3.3+. Note that this option is only used in
# Python 3+, as Python 2 users only have the option to use the mock package from PyPI anyway.
mock_use_standalone_module = False
# FOLLOW UP INFO. It's possible that we want to be using unittest.mock instead of
# mock available from pypi which seems to have regressions
# via: https://github.com/pytest-dev/pytest-mock/blob/9d221d5bc53dd0cfddbe775a1595f72d029b9ece/CHANGELOG.rst
# New configuration variable, mock_use_standalone_module (defaults to False).
# This forces the plugin to import mock instead of unittest.mock on Python 3.
# This is useful to import a newer version than the one available in the Python distribution.
#
# Previously the plugin would first try to import mock and fallback to unittest.mock
# in case of an ImportError, but this behavior has been removed because it could
# hide hard to debug import errors (#68).
#
# Now mock (Python 2) and unittest.mock (Python 3) are lazy-loaded to make it
# possible to implement the new mock_use_standlone_module configuration option.
# As a consequence of this the undocumented pytest_mock.mock_module variable,
# which pointed to the actual mock module being used by the plugin, has been removed.
#
# DEFAULT is now available from the mocker fixture.
####################################################################################

[isort]
# https://github.com/timothycrosley/isort
# https://github.com/timothycrosley/isort/wiki/isort-Settings
# splits long import on multiple lines indented by 4 spaces
multi_line_output = 4
indent = "    "
# by default isort don't check module indexes
not_skip = __init__.py
# will group `import x` and `from x import` of the same module.
force_sort_within_sections = true
# typing is stdlib on py35 but 3rd party on py34, let it hang in between
known_inbetweens = typing
sections = FUTURE,STDLIB,INBETWEENS,THIRDPARTY,FIRSTPARTY,LOCALFOLDER


# for reformatting code with yapf
[yapf]
# source: https://github.com/google/brotli/blob/606a70b77926a47769fd885584800a33a079861a/setup.cfg
based_on_style=google
# BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF=True
# COLUMN_LIMIT=95
# DEDENT_CLOSING_BRACKETS=True
# SPACE_BETWEEN_ENDING_COMMA_AND_CLOSING_BRACKET=False

# ---------------------------- FROM TEDI -----------------------------------------------
[aliases]
test=pytest
dists = sdist bdist_wheel

# [tool:pytest]
# addopts = --verbose --cov --cov-report term --cov-report html --flake8 --mypy

# SOURCE: https://github.com/pyscaffold/pyscaffold/blob/master/setup.cfg
[test]
# py.test options when running `python setup.py test`
addopts = --verbose
extras = True


# Coverage.py is a tool for measuring code coverage of Python programs.
# for more info: https://coverage.readthedocs.io/en/coverage-4.4.1/config.html
# https://coverage.readthedocs.io/en/latest/config.html
[coverage:run]
source = ultron8
omit =
    ultron8/pkg/*
    ultron8/docs/*
    ultron8/tests/*
    /etc/python3.6/sitecustomize.py
    venv/**
    ultron8/tests/**
    .eggs/**
    /home/travis/virtualenv/**
    tests/fixtures/simple/packs/linux/actions/checks/**

# # Run in parallel mode so that coverage can canonicalize the source paths
# # regardless of whether it runs locally or within a Docker container.
# parallel = True
# branch = true
# source = aioredis,tests

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

omit = */migrations/*

# https://coverage.readthedocs.io/en/coverage-4.3.1/config.html#paths
[coverage:paths]
# SOURCE: https://github.com/mtlynch/ingredient-phrase-tagger/blob/master/.coveragerc
# the first path is the path on the local filesystem
# the second path is the path as it appears within the Docker container
source =
    ultron8/
    /home/developer/app/ultron8

# [coverage:html]
# html_dir = htmlcov

# [coverage:xml]
# xml_output = cov.xml


# [flake8]
# max_line_length = 120

[mypy]
ignore_missing_imports = True
ignore_errors = True
# ---------------------------- FROM TEDI -----------------------------------------------

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no-vcs = 1
formats =
    sdist
    bdist_wheel
